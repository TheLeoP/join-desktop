/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as DevicesIndexImport } from './routes/devices/index'
import { Route as DevicesMediaDeviceIdImport } from './routes/devices/media.$deviceId'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DevicesIndexRoute = DevicesIndexImport.update({
  id: '/devices/',
  path: '/devices/',
  getParentRoute: () => rootRoute,
} as any)

const DevicesMediaDeviceIdRoute = DevicesMediaDeviceIdImport.update({
  id: '/devices/media/$deviceId',
  path: '/devices/media/$deviceId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/devices/': {
      id: '/devices/'
      path: '/devices'
      fullPath: '/devices'
      preLoaderRoute: typeof DevicesIndexImport
      parentRoute: typeof rootRoute
    }
    '/devices/media/$deviceId': {
      id: '/devices/media/$deviceId'
      path: '/devices/media/$deviceId'
      fullPath: '/devices/media/$deviceId'
      preLoaderRoute: typeof DevicesMediaDeviceIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/devices': typeof DevicesIndexRoute
  '/devices/media/$deviceId': typeof DevicesMediaDeviceIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/devices': typeof DevicesIndexRoute
  '/devices/media/$deviceId': typeof DevicesMediaDeviceIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/devices/': typeof DevicesIndexRoute
  '/devices/media/$deviceId': typeof DevicesMediaDeviceIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/devices' | '/devices/media/$deviceId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/devices' | '/devices/media/$deviceId'
  id: '__root__' | '/' | '/login' | '/devices/' | '/devices/media/$deviceId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  DevicesIndexRoute: typeof DevicesIndexRoute
  DevicesMediaDeviceIdRoute: typeof DevicesMediaDeviceIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  DevicesIndexRoute: DevicesIndexRoute,
  DevicesMediaDeviceIdRoute: DevicesMediaDeviceIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/devices/",
        "/devices/media/$deviceId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/devices/": {
      "filePath": "devices/index.tsx"
    },
    "/devices/media/$deviceId": {
      "filePath": "devices/media.$deviceId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
